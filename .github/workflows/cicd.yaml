name: build-and-deploy

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository }}/hello

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write    # needed for GHCR
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image (tagged by SHA)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest
          build-args: |
            COMMIT_SHA=${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Write kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_DATA }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Apply manifests (namespace demo)
        run: |
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          # Patch the deployment image to the current SHA (no file changes)
          kubectl -n demo set image deploy/hello nginx=${{ env.IMAGE_NAME }}:${{ github.sha }} --record || true
          # If deployment doesn't exist yet, create it and then patch
          kubectl apply -f k8s/deployment.yaml
          kubectl -n demo set image deploy/hello nginx=${{ env.IMAGE_NAME }}:${{ github.sha }} --record

      - name: Wait for rollout
        run: kubectl -n demo rollout status deploy/hello --timeout=180s

